#!/usr/bin/bash
# shellcheck disable=SC2317
# shellcheck disable=SC2059
#coloring
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No
#end coloring

#function section

# pinrt_color - a function to print color
    # @param $color: the color
    # @param $text: the text
    # @return: void

cprint(){
  local color=$1
  local text=$2
  local NOC=$NC
  printf "$color""$text""$NOC"
}

# unique_file - a function to add a unique file
    # @param $filename: the file name
    # @param $cmt: the commit name
    # @param $yes: the answer for the question in the beginning
    # @return: void

unique_file(){
    # check if the user is in git repo
    check_git
    git status --short
    cprint "$YELLOW" "[?] Do you wanna add special file [y/n]: "
    read -r -n1 yes  #specail msg for specail codition/situation
    echo
    if  [ "$yes" == 'y' ]
    then
        cprint "$PURPLE" "[!] here are the changes you made: \n"
        git status --short
        cprint "$GREEN""[*] add the file names to add them or ctrl + d to exit: \n"
        read -rea files
        for file in "${files[@]}"; do
            if [ -z "$file" ]; then
                cprint "$RED" "[!] you gave empty input try again\n"
            else
                git add "$file"
            fi
        done
        cprint "$PURPLE" "[?] give the commit name: \n"
        read -re cmt
        git commit -m "$cmt"
        push_and_check
        clear
        cprint "$CYAN" "[ ❤ ]Happy coding KING\n"
        exit
    fi
}
# check_git - a function to check if the user is in git repo
    # @return: void
check_git() {
    output=$(git rev-parse --is-inside-work-tree 2>/dev/null)
    if [ "$output" != "true" ]; then
        cprint "$RED" "[!] You are not in a Git repository\n"
        exit 1
    fi
}


# push_and_check - function that check if you push seccufly or not
    # @return: 1 if failed or 0 if passed
push_and_check(){
    branch=$(git rev-parse --abbrev-ref HEAD) # get the current branch name

    git push origin "$branch" > /dev/null 2>&1 &

    save_output=$? #storing the ouput for the condition
    if [ $save_output != 0 ]; then
        cprint "$RED""[!]there is issue with push i will push again hold-on!\n"
        git push origin "$branch"  > /dev/null 2>&1 & # try pushing again
        return 1
    elif [ $save_output == 0 ]; then
        cprint "$GREEN" "[ 😄 ] push successfully \n"
        return 0
    else
        git push origin "$branch" > /dev/null 2>&1 &
    fi
}

# commiting - commiting the changes
    # @Cname: the commit name
# return: commit name
commiting(){
    # adding all the changes
    git add .
    #commiting the changes
    cprint "$CYAN" "[?] provide commit or hit enter if you like "Update!" as your commit: \n"
    read -r -e  Cname #git the commit name for user
    if [ -z "$Cname" ]; then
        git commit -m "Update!"
    else
        git commit -m "$Cname"
fi
}
# end func


# the main

# add special file
unique_file
# general adding the changes and commiting
commiting
#push the changes and check
push_and_check 

#ending program bye :)
echo clearing after 3s
sleep 3
clear
cprint "$PURPLE" "[ 💜 ] Happy coding KING\n"
